apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'nu.studer.jooq'
apply plugin: 'io.freefair.aspectj.post-compile-weaving'

description = 'account-service'

dependencies {
    compile(
            project(':grpc-common'),
            project(':protobuf-spring-cloud-stream'),
            'org.springframework.boot:spring-boot-starter-jooq',
            'org.springframework.cloud:spring-cloud-starter-stream-kafka',
            'org.springframework.cloud:spring-cloud-starter-kubernetes-config',
            'io.grpc:grpc-protobuf',
            'io.grpc:grpc-stub',
            'io.grpc:grpc-services',
            'com.salesforce.servicelibs:reactor-grpc-stub',
            'net.devh:grpc-server-spring-boot-starter',
            'org.apache.commons:commons-lang3',
            'org.javamoney:moneta',
            'org.liquibase:liquibase-core',
            'com.google.guava:guava',
            'org.aspectj:aspectjrt',
            'org.aspectj:aspectjweaver',
            'org.postgresql:postgresql',
            'org.slf4j:jul-to-slf4j'
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.cloud:spring-cloud-stream-test-support',
            'io.projectreactor:reactor-test',
            'io.grpc:grpc-testing',
            'org.testcontainers:postgresql',
            'com.ninja-squad:DbSetup',
            'org.assertj:assertj-db',
            'org.mockito:mockito-junit-jupiter',
            'org.junit.jupiter:junit-jupiter-api'
    )

    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine',
            'org.junit.vintage:junit-vintage-engine'
    )

    aspect(
            "org.springframework:spring-aspects"
    )

    jooqRuntime(
            project(':liquibase-tc'),
            'org.testcontainers:postgresql',
            'org.postgresql:postgresql',
            'org.slf4j:slf4j-nop'
    )
}

aspectj {
    version = "${ver.aspectj}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${ver.protobuf}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${ver.grpc}"
        }
        reactor {
            artifact = "com.salesforce.servicelibs:reactor-grpc:${ver.reactiveGrpc}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'enable_deprecated=false'
            }
            reactor {}
        }
    }
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/source/proto/main/java")
        sourceDirs += file("$buildDir/generated/source/proto/main/grpc")
        sourceDirs += file("$buildDir/generated/source/proto/main/reactor")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/java")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/grpc")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/reactor")
    }
}

jib {
    from {
        image = 'galleog/grpc-health-probe:alpine'
    }
}

jooq {
    version = ver.jooq

    domain(sourceSets.main) {
        jdbc {
            driver = database.driver
            url = database.url
            user = database.username
            password = database.password
        }

        generator {
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = '.*'
                excludes = 'databasechangelog.*'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        userType = 'com.github.galleog.piggymetrics.account.domain.TimePeriod'
                        enumConverter = true
                        expression = '.*\\.PERIOD'
                    }
                    forcedType {
                        userType = 'com.github.galleog.piggymetrics.account.domain.ItemType'
                        enumConverter = true
                        expression = '.*\\.ITEM_TYPE'
                    }
                }
            }
            generate {
                deprecated = false
                javaTimeTypes = true
                indexes = false
            }
            target {
                packageName = 'com.github.galleog.piggymetrics.account.domain'
                directory = "$buildDir/generated/source/jooq"
            }
        }
    }
}

generateDomainJooqSchemaSource.with {
    javaExecSpec = { JavaExecSpec s ->
        s.systemProperties << [changeLogFile: "${project.projectDir}/src/main/resources/db/changelog/db.changelog-master.yaml"]
    }
}

